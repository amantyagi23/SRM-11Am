class Pair{
    int first;
    int second;
    public Pair(int first,int second){
        this.first = first;
        this.second = second;
    }
}

class Solution {
    void bfs(int ro , int co , char grid[][] ,int[][]  visited ){
        int n = grid.length;
        int m = grid[0].length;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(ro,co));
        visited[ro][co] = 1;
        int dRow[] = {-1 , 0 ,1 ,0};
        int dCol[] = {0 , -1 , 0 , 1};

        while(!q.isEmpty()){
            int row = q.peek().first;
            int col = q.peek().second;
            q.remove();

            for(int i = 0;i<4;i++){
                int nrow = row + dRow[i];
                int ncol = col + dCol[i];
                if(nrow >=0 && ncol >=0 && nrow < n && ncol <m && grid[nrow][ncol] == '1' && visited[nrow][ncol] == 0){
                    q.add(new Pair(nrow,ncol));
                    visited[nrow][ncol] = 1;
                }
            }

        }

    }
    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int visited[][] = new int[n][m];
        int count = 0;

        for(int i=0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(visited[i][j] == 0 && grid[i][j]  == '1'){
                    count++;
                    bfs(i,j, grid , visited );
                   
                }
            }
        }
        return count;
    }
}